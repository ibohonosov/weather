{"ast":null,"code":"var _jsxFileName = \"/Users/Ilya/Desktop/Weather_React/weather/src/App.js\";\nimport React from \"react\";\nimport Form from \"./components/form\";\nimport Info from \"./components/info\";\nimport Weather from \"./components/Weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"898b70eee2d2d2b57e9ebddd141dfd4f\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async event => {\n      event.preventDefault();\n      const city = event.target.elements.city.value;\n\n      if (city) {\n        const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        const sunset = data.sys.sunset;\n        const date = new Date();\n        date.setTime(sunset);\n        const sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + DynamicsCompressorNode.this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          error: \"\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        weatherMethod: this.gettingWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Weather, {\n        temp: this.state.temp,\n        city: this.state.city,\n        country: this.state.country,\n        sunrise: this.state.sunrise,\n        sunset: this.state.sunset,\n        error: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Ilya/Desktop/Weather_React/weather/src/App.js"],"names":["React","Form","Info","Weather","API_KEY","App","Component","state","temp","undefined","city","country","sunrise","sunset","error","gettingWeather","event","preventDefault","target","elements","value","api_url","fetch","data","json","sys","date","Date","setTime","sunset_date","getHours","getMinutes","DynamicsCompressorNode","this","setState","main","name","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BC,KAF8B,GAEtB;AACJC,MAAAA,IAAI,EAAEC,SADF;AAEJC,MAAAA,IAAI,EAAED,SAFF;AAGJE,MAAAA,OAAO,EAAEF,SAHL;AAIJG,MAAAA,OAAO,EAAEH,SAJL;AAKJI,MAAAA,MAAM,EAAEJ,SALJ;AAMJK,MAAAA,KAAK,EAAEL;AANH,KAFsB;;AAAA,SAW9BM,cAX8B,GAWb,MAAOC,KAAP,IAAiB;AAC9BA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMP,IAAI,GAAGM,KAAK,CAACE,MAAN,CAAaC,QAAb,CAAsBT,IAAtB,CAA2BU,KAAxC;;AAEA,UAAGV,IAAH,EAAS;AACL,cAAMW,OAAO,GAAG,MAAMC,KAAK,CAAE,oDAAmDZ,IAAK,UAASN,OAAQ,eAA3E,CAA3B;AACA,cAAMmB,IAAI,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAnB;AAEA,cAAMX,MAAM,GAAGU,IAAI,CAACE,GAAL,CAASZ,MAAxB;AACA,cAAMa,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACAD,QAAAA,IAAI,CAACE,OAAL,CAAaf,MAAb;AACA,cAAMgB,WAAW,GAAGH,IAAI,CAACI,QAAL,KAAkB,GAAlB,GAAwBJ,IAAI,CAACK,UAAL,EAAxB,GAA4C,GAA5C,GAAkDC,sBAAsB,CAE5FC,IAFsE,CAEjEC,QAFiE,CAEvD;AACX1B,UAAAA,IAAI,EAAEe,IAAI,CAACY,IAAL,CAAU3B,IADL;AAEXE,UAAAA,IAAI,EAAEa,IAAI,CAACa,IAFA;AAGXzB,UAAAA,OAAO,EAAEY,IAAI,CAACE,GAAL,CAASd,OAHP;AAIXC,UAAAA,OAAO,EAAEW,IAAI,CAACE,GAAL,CAASb,OAJP;AAKXC,UAAAA,MAAM,EAAEU,IAAI,CAACE,GAAL,CAASZ,MALN;AAMXC,UAAAA,KAAK,EAAC;AANK,SAFuD,CAAtE;AAUH;AACJ,KAjC6B;AAAA;;AAkC9BuB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,aAAa,EAAE,KAAKtB;AAA1B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,OAAD;AACI,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,IADrB;AAEI,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWG,IAFrB;AAGI,QAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,OAHxB;AAII,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,OAJxB;AAKI,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWM,MALvB;AAMI,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO;AANtB;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAjD6B;;AAoDlC,eAAeT,GAAf","sourcesContent":["import React from \"react\";\nimport Form from \"./components/form\";\nimport Info from \"./components/info\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"898b70eee2d2d2b57e9ebddd141dfd4f\";\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (event) => {\n        event.preventDefault();\n        const city = event.target.elements.city.value\n            \n        if(city) {\n            const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n\n            const sunset = data.sys.sunset;\n            const date = new Date();\n            date.setTime(sunset);\n            const sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + DynamicsCompressorNode.\n\n            this.setState( {\n                temp: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                sunrise: data.sys.sunrise,\n                sunset: data.sys.sunset,\n                error:\"\"\n            });\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Info />\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather \n                    temp={this.state.temp}\n                    city={this.state.city}\n                    country={this.state.country}\n                    sunrise={this.state.sunrise}\n                    sunset={this.state.sunset}\n                    error={this.state.error}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}