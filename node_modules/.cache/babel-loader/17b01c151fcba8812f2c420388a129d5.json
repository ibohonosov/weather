{"ast":null,"code":"var _jsxFileName = \"/Users/Ilya/Desktop/Weather_React/weather/src/App.js\";\nimport React from \"react\";\nimport Form from \"./components/form\";\nimport Info from \"./components/info\";\nimport Weather from \"./components/Weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"898b70eee2d2d2b57e9ebddd141dfd4f\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      pressure: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async event => {\n      event.preventDefault();\n      const city = event.target.elements.city.value;\n\n      if (city) {\n        const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n        const data = await api_url.json();\n        const sunset = data.sys.sunset;\n        const date = new Date();\n        date.setTime(sunset);\n        const sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n        this.setState({\n          temp: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          pressure: data.main.pressure,\n          sunset: sunset_date,\n          error: undefined\n        });\n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          pressure: undefined,\n          sunset: undefined,\n          error: \"Введите название города\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Form, {\n              weatherMethod: this.gettingWeather\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Weather, {\n              temp: this.state.temp,\n              city: this.state.city,\n              country: this.state.country,\n              pressure: this.state.pressure,\n              s: true,\n              unset: this.state.sunset,\n              error: this.state.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Ilya/Desktop/Weather_React/weather/src/App.js"],"names":["React","Form","Info","Weather","API_KEY","App","Component","state","temp","undefined","city","country","pressure","sunset","error","gettingWeather","event","preventDefault","target","elements","value","api_url","fetch","data","json","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","name","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"./components/form\";\nimport Info from \"./components/info\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"898b70eee2d2d2b57e9ebddd141dfd4f\";\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (event) => {\n        event.preventDefault();\n        const city = event.target.elements.city.value\n            \n        if(city) {\n            const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n            const data = await api_url.json();\n\n            const sunset = data.sys.sunset;\n            const date = new Date();\n            date.setTime(sunset);\n            const sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n            this.setState( {\n                temp: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                pressure: data.main.pressure,\n                sunset: sunset_date,\n                error:undefined\n            });\n        }\n        else {\n            this.setState( {\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                pressure: undefined,\n                sunset: undefined,\n                error: \"Введите название города\"\n            });\n        }\n    }\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div>\n                            <Info />\n                        </div>\n                        <div>\n                        <Form weatherMethod={this.gettingWeather} />\n                        <Weather \n                        temp={this.state.temp}\n                        city={this.state.city}\n                        country={this.state.country}\n                        pressure={this.state.pressure}\n                    s   unset={this.state.sunset}\n                    error={this.state.error}\n                />\n                        </div>\n                    </div>\n                </div>\n\n                \n               \n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}